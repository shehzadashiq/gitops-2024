---
name: Check Port Accessibility

on:
  schedule:
    - cron: '*/5 * * * *'

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      # Use OIDC Role to checkout the repository with the Github Actions Runner
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

      # # Generates an execution plan for Terraform
      # - name: Terraform Plan Output
      #   run: |
      #     terraform output -json >
      #     terraform output -json plan.tfplan > /tmp/plan.json

      # Apply the Configuration
      - name: Terraform Apply
        run: |
          terraform apply -input=false -auto-approve
          terraform output -json > /tmp/plan.json

      # Extract values from Terraform output
      - name: Extract Terraform Output
        id: extract
        run: |
          url=$(jq -r '.grafana_ip.value' < /tmp/plan.json)
          # port=$(jq -r '.instance_port.value' < /tmp/plan.json)

          # Use regex to extract IP and port from the URL
          ip=$(echo "$url" | sed -E 's|http://([^:]+):([0-9]+)|\1|')
          port=$(echo "$url" | sed -E 's|http://([^:]+):([0-9]+)|\2|')

          if [[ -z "$ip" || -z "$port" ]]; then
            echo "Error: IP or PORT value is empty."
            exit 1
          fi

          echo "IP=$ip"
          echo "PORT=$port"
          echo "IP=$ip" >> $GITHUB_ENV
          echo "PORT=$port" >> $GITHUB_ENV

      # Step Check if the port is accessible
      - name: Check Port Accessibility
        id: check-port
        run: |
          echo "Checking if $IP:$PORT is accessible..."
          timeout 5 bash -c "cat < /dev/null > /dev/tcp/$IP/$PORT"
        continue-on-error: true

      # Create Issue if Port is Inaccessible
      - name: Create Issue if Port is Inaccessible
        if: steps.check-port.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const ip = process.env.IP;
            const port = process.env.PORT;
            const issueTitle = `Port ${port} on ${ip} is not accessible`;
            const issueBody = `The port ${port} on IP ${ip} could not be reached. Please investigate the issue.`;

            // Check if an issue already exists
            const existingIssues = await github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
            });

            // Only create an issue if one with the same title does not exist
            if (!existingIssues.data.some(issue => issue.title === issueTitle)) {
              await github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
              });
            }
