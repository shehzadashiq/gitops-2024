---
name: Detect Terraform Drift On Plan

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'
    # - cron: '0 0 * * *'  # Runs daily at midnight (UTC)
    # - cron:  '0 * * * *' # Every hour.

permissions:
  contents: read
  id-token: write
  pull-requests: write  # Required to post comments
  issues: write  # Grant write permission to allow issue creation

jobs:
  detect-drift:
    name: Detect Terraform Drift
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      # Use OIDC Role to checkout the repository with the Github Actions Runner
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Check for Drift with Terraform Plan (refresh-only)
      - name: Terraform Plan (Refresh Only)
        id: plan
        run: |
          terraform plan -refresh-only -no-color > plan.txt
          cat plan.txt
          if grep -q "No changes. Infrastructure is up-to-date." plan.txt; then
            echo "No drift detected."
            echo "DRIFT=false" >> $GITHUB_ENV
          else
            echo "Drift detected!"
            echo "DRIFT=true" >> $GITHUB_ENV
          fi

      # Create Issue if Drift is Detected
      - name: Create Issue if Drift Detected
        if: env.DRIFT == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitle = 'Terraform Drift Detected';
            const issueBody = `Terraform drift has been detected in the infrastructure.\n\n
                               Please review the details in the latest Terraform plan output.`;

            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
            });

            if (!existingIssues.data.some(issue => issue.title === issueTitle)) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
              });
            }

      # Upload Plan Output (Optional, for Review)
      - name: Upload Plan Output
        if: env.DRIFT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-drift-plan
          path: ./terraform/plan.txt
